@page "/"
@using System.Threading;
@using Contest.Shared.Models;
@using Contest.Shared.Enums;
@using System.IO;
@using Markdig;
@inject IContestantService contestantService;
@inject ITimeService  timeService;
@inject IGameService gameService;

<h1>Conway's Game of Life</h1>

@if (Contestants.Any())
{
    <h3>Current Contestants (@Contestants.Count()):</h3>
    <ul>
        @foreach (var contestant in Contestants)
        {
            <li>@contestant.Name (last seen at @contestant.LastSeen.ToShortTimeString())</li>
        }
    </ul>
}
else
{
    <h3>No one has registered yet.</h3>
}

<div>
    <h3>Instructions</h3>
    @((MarkupString)instructions)
</div>

<div>
    <h3>Game Status</h3>
    @if(gameService.GetGameStatus().IsStarted)
    {
        <h4>Game has started!</h4>
        <a href="/leaderboard">See Game Stats</a>
    }
    else
    {
        <h4>Game has not started yet.</h4>
    }
</div>

@code {
    const int UserExpirationInSeconds = 60;

    public IEnumerable<Contestant> Contestants { get; private set; }

    public string instructions { get; set; }

    protected override void OnInitialized()
    {
        var instructionsFilePath = Path.Combine(Directory.GetCurrentDirectory() + "/../README.md");
        var instructionsText = File.ReadAllText(instructionsFilePath);
        instructions = Markdown.ToHtml(instructionsText);
    }

    protected override async Task OnInitializedAsync()
    {
        Contestants = new Contestant[]{};
        var timer = new Timer(new TimerCallback(async _ =>
        {
            InvokeAsync(updateContestants);
        }), state: null, dueTime: 0, period: 2_000);
    }

    private async Task<bool> updateContestants()
    {
        return await Task.Run<bool>(() => {
            Contestants = contestantService.GetContestants();
            InvokeAsync(() => StateHasChanged());
            return true;
        });
        // var staleContestants = from c in allContestants
        //                        where c.LastSeen.AddSeconds(UserExpirationInSeconds) < timeService.Now()
        //                        select c;
        //
        // foreach (var staleContestant in staleContestants)
        // {
        //     contestantService.RemoveContestant(staleContestant);
        // }

        // Contestants = allContestants.Except(staleContestants);
    }
}
