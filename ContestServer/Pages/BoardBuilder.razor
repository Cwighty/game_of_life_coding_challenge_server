@page "/BoardBuilder"
@using Contest.Shared.Models;
@using System.Threading;
@using System.Text.Json;
@using Contest.Shared;


<div>
    <label>Number of generations to compute</label><br />
    <input type="text" @bind="NumGenerations" />
    <div asp-validation-summary="All" class="text-danger"></div>
    <button class="btn btn-primary" @onclick="solve">Get Solution</button>

    <p>@SerializedBoard()</p>

    <h3>Solution: </h3>
    <p>@Solution</p>

    <h3>Configure Board</h3>
    <div>
        @for(int h = Height; h > 0; h--)
        {
            <div class = "row">
                @for(int w = 1; w <= Width; w++)
                {
                    var row = h;
                    var column = w;
                    <input type="checkbox"
                        @bind-value="StartingBoard[row, column]"
                        @bind-value:event="oninput">
                }
            </div>
        }
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        StartingBoard = new bool[Height+1, Width+1];
        coordinates = new Coordinate[] {};
    }

    public string SeedBoard { get; set; }
    public int NumGenerations { get; set; }
    public static int Width = 60;
    public static int Height = 40;
    public bool[,] StartingBoard { get; set; }
    public string Solution { get; set; }
    IEnumerable<Coordinate> coordinates { get; set; }

    public int computedRow(int row)
    {
        return row - ( Height / 2 );
    }
    public int computedColumn(int column)
    {
        return column - ( Width / 2 );
    }

    public string SerializedBoard()
    {
        coordinates = new Coordinate[] {};
        for(int h = 1; h <= Height; h++)
        {
            for(int w = 1; w <= Width; w++)
            {
                coordinates = StartingBoard[h,w]
                    ? coordinates.Append(new Coordinate(computedRow(h), computedColumn(w)))
                    : coordinates;
            }
        }
        return JsonSerializer.Serialize(coordinates);
    }

    public void solve()
    {
        var solution = GameSolver.Solve(coordinates, NumGenerations);
        Solution = JsonSerializer.Serialize(solution);
    }

}
