@page  "/leaderboard"
@using System.Threading
@inject GameService gameService;
@inject IContestantService contestantService;
<h1>Leader Board</h1>

@if (status.IsStarted)
{
    <h2>Game has started!</h2>
    <p>Computing @status.NumberGenerations generations</p>

    <table>
        <tr>
            <th>Name</th>
            <th>Last Seen</th>
            <th>Generations</th>
            <th>Status</th>
            <th>Elapsed</th>
        </tr>
        @foreach (var contestant in contestantService.GetContestants())
        {
            <tr>
                <td>@contestant.Name</td>
                <td>@contestant.LastSeen.ToShortTimeString()</td>
                <td>@contestant.GenerationsComputed</td>
                <td>@contestant.StatusCode</td>
                <td>@contestant.Elapsed</td>
            </tr>
        }
    </table>

    @if(status.IsGameOver)
    {
        <p>Good game! :)</p>
    }
    else
    {
        <button @onclick="endGame">End Game</button>
    }
}

@code {
    protected override void OnInitialized()
    {
        refresh();
        var timer = new Timer(new TimerCallback(async _ => 
        {
            await InvokeAsync(refresh);
        }), state: null, dueTime: 500, period: 500);
    }

    GameStatus status;

    async Task refresh()
    {
        status = gameService.GetGameStatus();
        StateHasChanged();
        Console.WriteLine($"refreshing leaderboard @ {DateTime.Now}");
    }

    void endGame()
    {
        gameService.EndGame();
    }
}
