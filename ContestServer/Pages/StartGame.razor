@page "/StartGame"
@using System.Threading
@using System.Text.Json
@using Contest.Shared
@using Contest.Shared.Models;

@inject IGameService game
@inject NavigationManager NavManager

<h1>Start Game</h1>

<div>
    @if (gameIsStarting)
    {
        <p>Solving game...</p>
        <p>Once solution is ready clients will be notified the game has started!</p>
    }
    else
    {
        <label>Pick a default game:</label>
        <select @bind="SelectedDefaultGame">
            @foreach (var game in DefaultGames.Keys)
            {
                <option value="@game">@game</option>
            }
        </select>
        <label>Number of generations to compute:</label><br />
        <input type="text" @bind="NumGenerations" />
        <div asp-validation-summary="All" class="text-danger"></div>
        <button class="btn btn-primary" @onclick="begin">Start Game</button>
        <label>Configure Starting Board</label>
        <textarea class="form-control" @bind="SerializedBoard"></textarea>
    }
</div>

@code {
    public Dictionary<string, string> DefaultGames = new Dictionary<string, string>(new[]
    {
        new KeyValuePair<string, string>("", "[]"),
        new KeyValuePair<string,string>("Gosper Glider Gun", SampleGames.GosperGliderGunInitial),
        new KeyValuePair<string, string>("Left Leaning O", SampleGames.LeftLeaningO),
    });
    string selectedDefaultGame;
    string SelectedDefaultGame
    {
        get { return selectedDefaultGame; }
        set
        {
            selectedDefaultGame = value;
            SerializedBoard = DefaultGames[selectedDefaultGame];
        }
    }

    bool gameIsStarting = false;
    private JsonSerializerOptions options;

    protected override void OnInitialized()
    {
        SelectedDefaultGame = DefaultGames.Keys.First();
    }

    public int NumGenerations { get; set; } = 150;

    public string SerializedBoard { get; set; }

    public async Task begin()
    {
        gameIsStarting = true;
        var jsonBoard = DefaultGames[selectedDefaultGame];
        var startingBoard = JsonSerializer.Deserialize<IEnumerable<Coordinate>>(jsonBoard);
        await Task.Run<IEnumerable<Coordinate>>(() =>
        {
            var endingBoard = GameSolver.Solve(startingBoard, NumGenerations, batchSize: NumGenerations);
            return endingBoard;
        }).ContinueWith((t) =>
        {
            var endingBoard = t.Result;
            game.StartGame(startingBoard, NumGenerations, endingBoard);
            NavManager.NavigateTo("/leaderboard");
        }).ConfigureAwait(true);
    }
}
